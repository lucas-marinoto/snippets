pipeline {
    agent any

    stages {
        stage('Checkout do Repositório') {
            steps {
                // Checkout do repositório e mudança para a branch main
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'https://github.com/lucas-marinoto/snippets.git']]])
            }
        }

        stage('Obter nome da branch do pull request') {
            steps {
                script {
                    // Obtém a mensagem do commit de merge
                    def mergeMessage = sh(script: "git log --merges --first-parent -1 --pretty=%B", returnStdout: true).trim()
                    echo "Mensagem do commit de merge: ${mergeMessage}"

                    // Verifica se a mensagem do commit de merge contém a string 'Merge pull request'
                    if (mergeMessage.contains('Merge pull request')) {
                        def parts = mergeMessage.split(' ')
                        def pullRequestNumber = parts[3]
                        def branchName = parts[5]
                        echo "Número do pull request: ${pullRequestNumber}"
                        echo "Nome da branch mesclada: ${branchName}"
                        env.PULL_REQUEST_NUMBER = pullRequestNumber
                        env.MERGED_BRANCH_NAME = branchName
                    }
                    // Verifica se a mensagem do commit de merge contém a string 'Merge branch'
                    else if (mergeMessage.contains('Merge branch')) {
                        def parts = mergeMessage.split('\'')
                        def branchName = parts[1]
                        echo "Nome da branch mesclada: ${branchName}"
                        env.MERGED_BRANCH_NAME = branchName
                    }
                    // Caso contrário, mensagem não reconhecida
                    else {
                        error "Mensagem de merge não reconhecida"
                    }
                }
            }
        }

        stage('Encontrar commit do pull request anterior') {
            steps {
                script {
                    // Fetch para garantir que todas as referências remotas estejam atualizadas
                    sh 'git fetch'
                    
                    // Encontra o commit associado ao pull request anterior ao último mesclado na branch main
                    def mergeCommits = sh(script: "git log --merges --first-parent --grep='Merge pull request' origin/main", returnStdout: true).trim().split('\n')
                    
                    if (mergeCommits.size() > 1) {
                        def previousPullRequestCommit = mergeCommits[1].split(' ')[1]
                        echo "Commit do pull request anterior: ${previousPullRequestCommit}"
                        env.PREVIOUS_PULL_REQUEST_COMMIT = previousPullRequestCommit
                    } else {
                        echo "Não há commits associados ao pull request anterior na branch main."
                        currentBuild.result = 'ABORTED'
                        error "Não foi possível encontrar o commit do pull request anterior."
                    }
                }
            }
        }

        stage('Exibir alterações') {
            steps {
                script {
                    // Usa git diff para mostrar as alterações entre o commit anterior e HEAD da branch feature
                    def diffOutput = sh(script: "git diff --name-only ${env.PREVIOUS_PULL_REQUEST_COMMIT} HEAD", returnStdout: true).trim()
                    echo "Alterações desde o pull request anterior:"
                    echo "${diffOutput}"
                }
            }
        }

        stage('Exibir mudanças em arquivos modificados') {
            steps {
                script {
                    // Divide a saída do git diff em linhas
                    def diffLines = sh(script: "git diff ${env.PREVIOUS_PULL_REQUEST_COMMIT} HEAD", returnStdout: true).trim().split('\n')

                    // Variável para armazenar o nome do arquivo atual
                    def currentFile = ''

                    // Loop através de cada linha do git diff
                    for (def line : diffLines) {
                        // Verifica se a linha começa com 'diff --git'
                        if (line.startsWith('diff --git')) {
                            // Extrai o nome do arquivo
                            currentFile = line.tokenize(' ')[-1]
                            echo "Arquivo: ${currentFile}"
                        }
                        // Verifica se a linha começa com '+', indicando uma adição
                        else if (line.startsWith('+')) {
                            echo "Adição: ${line.substring(1)}"
                        }
                        // Verifica se a linha começa com '-', indicando uma remoção
                        else if (line.startsWith('-')) {
                            echo "Remoção: ${line.substring(1)}"
                        }
                        // Verifica se a linha começa com ' ', indicando uma linha inalterada
                        else if (line.startsWith(' ')) {
                            // Não faz nada
                        }
                        // Caso contrário, trata-se de uma linha de cabeçalho ou outro tipo de linha no diff
                        else {
                            // Não faz nada
                        }
                    }
                }
            }
        }

        // Outros estágios aqui...

    }
}
